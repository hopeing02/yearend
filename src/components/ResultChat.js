import React, { useEffect, useRef } from 'react';
import { useTax } from '../context/TaxContext';
import { 
  calculateLaborIncomeDeduction, 
  calculatePersonalDeduction, 
  calculatePensionInsurance,
  calculateTaxBaseAndAmount,
  calculateLaborIncomeTaxDeduction,
  calculateFinalTax,
  formatNumber 
} from '../utils/calc';

/**
 * Ïã§ÏãúÍ∞Ñ Ï±ÑÌåÖÌòï Ïó∞ÎßêÏ†ïÏÇ∞ Í≤∞Í≥º ÌëúÏãú Ïª¥Ìè¨ÎÑåÌä∏
 * ÏûÖÎ†•Í∞íÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í≥ÑÏÇ∞ Í≥ºÏ†ïÏùÑ Ï±ÑÌåÖÏóê Ï∂îÍ∞ÄÌï©ÎãàÎã§
 */
const ResultChat = () => {
  const { 
    chatMessages, 
    addChatMessage, 
    replaceChatMessage,
    clearChatMessages, 
    formData, 
    currentStep,
    prevStep,
    resetForm 
  } = useTax();

  // ÎîîÎ∞îÏö¥Ïã±ÏùÑ ÏúÑÌïú ÌÉÄÏù¥Î®∏ Ï∞∏Ï°∞Îì§
  const salaryTimerRef = useRef(null);
  const personalTimerRef = useRef(null);
  const pensionTimerRef = useRef(null);
  const taxDeductionTimerRef = useRef(null);

  // Ï¥àÍ∏∞ ÌôòÏòÅ Î©îÏãúÏßÄ Ï†úÍ±∞ (Ï§ëÎ≥µ Î¨∏Ï†úÎ°ú Ïù∏Ìï¥ ÏÇ≠Ï†ú)

  // Í∏âÏó¨ ÏûÖÎ†•Ïãú ÎîîÎ∞îÏö¥Ïã±Îêú Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  useEffect(() => {
    if (formData.salary > 0) {
      // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
      if (salaryTimerRef.current) {
        clearTimeout(salaryTimerRef.current);
      }
      
      // 300ms ÌõÑÏóê Î©îÏãúÏßÄ ÍµêÏ≤¥ (ÎîîÎ∞îÏö¥Ïã± - Îçî Îπ†Î•∏ Î∞òÏùë)
      salaryTimerRef.current = setTimeout(() => {
        const salaryInWon = formData.salary * 10000;
        const laborIncomeResult = calculateLaborIncomeDeduction(salaryInWon);
        
        const newMessage = {
          id: `salary-${Date.now()}`,
          type: 'calculation',
          title: 'üí∞ Ï¥ùÍ∏âÏó¨ ÏûÖÎ†• ÏôÑÎ£å',
          content: `üìà Ï¥ùÍ∏âÏó¨: ${formatNumber(salaryInWon)}Ïõê\n\nüìä Í∑ºÎ°úÏÜåÎìùÍ≥µÏ†ú Í≥ÑÏÇ∞:\n${laborIncomeResult.formula}\n\nüí° Í∑ºÎ°úÏÜåÎìùÍ∏àÏï°: ${formatNumber(salaryInWon - laborIncomeResult.amount)}Ïõê\n\n‚úÖ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!`,
          timestamp: new Date()
        };
        
        // Í∏∞Ï°¥ Í∏âÏó¨ Î©îÏãúÏßÄÎ•º ÏÉà Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
        replaceChatMessage('salary-', newMessage);
      }, 300);
    }
    
    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    return () => {
      if (salaryTimerRef.current) {
        clearTimeout(salaryTimerRef.current);
      }
    };
  }, [formData.salary]);

  // Ïù∏Ï†ÅÍ≥µÏ†ú ÏûÖÎ†•Ïãú ÎîîÎ∞îÏö¥Ïã±Îêú Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  useEffect(() => {
    if (Object.keys(formData.personalDeduction).length > 0) {
      // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
      if (personalTimerRef.current) {
        clearTimeout(personalTimerRef.current);
      }
      
      // 500ms ÌõÑÏóê Î©îÏãúÏßÄ ÍµêÏ≤¥ (ÎîîÎ∞îÏö¥Ïã±)
      personalTimerRef.current = setTimeout(() => {
        const personalResult = calculatePersonalDeduction(formData.personalDeduction);
        
        const newMessage = {
          id: `personal-${Date.now()}`,
          type: 'calculation', 
          title: 'üë• Ïù∏Ï†ÅÍ≥µÏ†ú Í≥ÑÏÇ∞',
          content: `Í∏∞Î≥∏Í≥µÏ†ú: ${formatNumber(personalResult.basicDeduction)}Ïõê\nÏ∂îÍ∞ÄÍ≥µÏ†ú: ${formatNumber(personalResult.additionalDeduction)}Ïõê\nÏ¥ù Ïù∏Ï†ÅÍ≥µÏ†ú: ${formatNumber(personalResult.totalDeduction)}Ïõê`,
          timestamp: new Date()
        };
        
        // Í∏∞Ï°¥ Ïù∏Ï†ÅÍ≥µÏ†ú Î©îÏãúÏßÄÎ•º ÏÉà Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
        replaceChatMessage('personal-', newMessage);
      }, 500);
    }
    
    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    return () => {
      if (personalTimerRef.current) {
        clearTimeout(personalTimerRef.current);
      }
    };
  }, [formData.personalDeduction]);

  // Ïó∞Í∏àÎ≥¥ÌóòÎ£å ÏûÖÎ†•Ïãú ÎîîÎ∞îÏö¥Ïã±Îêú Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  useEffect(() => {
    if (Object.keys(formData.pensionInsurance).length > 0 && formData.salary > 0) {
      // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
      if (pensionTimerRef.current) {
        clearTimeout(pensionTimerRef.current);
      }
      
      // 500ms ÌõÑÏóê Î©îÏãúÏßÄ Ï∂îÍ∞Ä (ÎîîÎ∞îÏö¥Ïã±)
      pensionTimerRef.current = setTimeout(() => {
        const salaryInWon = formData.salary * 10000;
        const pensionResult = calculatePensionInsurance(formData.pensionInsurance, salaryInWon);
        
        const newMessage = {
          id: `pension-${Date.now()}`,
          type: 'calculation',
          title: 'üí≥ Ïó∞Í∏àÎ≥¥ÌóòÎ£å Í≥ÑÏÇ∞',
          content: `Íµ≠ÎØºÏó∞Í∏à: ${formatNumber(pensionResult.nationalPension)}Ïõê\nÍ±¥Í∞ïÎ≥¥ÌóòÎ£å: ${formatNumber(pensionResult.healthInsurance)}Ïõê\nÏ¥ù Ïó∞Í∏àÎ≥¥ÌóòÎ£å: ${formatNumber(pensionResult.totalPension)}Ïõê`,
          timestamp: new Date()
        };
        
        // Í∏∞Ï°¥ Ïó∞Í∏àÎ≥¥ÌóòÎ£å Î©îÏãúÏßÄÎ•º ÏÉà Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
        replaceChatMessage('pension-', newMessage);
      }, 500);
    }
    
    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    return () => {
      if (pensionTimerRef.current) {
        clearTimeout(pensionTimerRef.current);
      }
    };
  }, [formData.pensionInsurance, formData.salary]);

  // ÏÑ∏Ïï°Í≥µÏ†ú ÏûÖÎ†•Ïãú ÎîîÎ∞îÏö¥Ïã±Îêú Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  useEffect(() => {
    if (Object.keys(formData.taxDeduction).length > 0) {
      // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
      if (taxDeductionTimerRef.current) {
        clearTimeout(taxDeductionTimerRef.current);
      }
      
      // 500ms ÌõÑÏóê Î©îÏãúÏßÄ Ï∂îÍ∞Ä (ÎîîÎ∞îÏö¥Ïã±)
      taxDeductionTimerRef.current = setTimeout(() => {
        const taxDeductions = {
          child: Math.min((formData.taxDeduction.childCount || 0) * 150000, 300000),
          pensionAccount: Math.min((formData.taxDeduction.pensionAccount || 0) * 0.15, 300000),
          rent: Math.min((formData.taxDeduction.monthlyRent || 0) * (formData.taxDeduction.rentMonths || 0) * 0.1, 750000),
          isa: Math.min((formData.taxDeduction.isaAmount || 0) * 0.15, 300000),
          medical: Math.min((formData.taxDeduction.medicalExpenses || 0) * 0.15, 300000),
          education: Math.min((formData.taxDeduction.educationExpenses || 0) * 0.15, 300000),
          donation: Math.min((formData.taxDeduction.donationAmount || 0) * 0.15, 300000)
        };

        const totalTaxDeduction = Object.values(taxDeductions).reduce((sum, val) => sum + val, 0);
        
        let deductionDetails = '';
        if (taxDeductions.child > 0) deductionDetails += `ÏûêÎÖÄÏÑ∏Ïï°Í≥µÏ†ú: ${formatNumber(taxDeductions.child)}Ïõê\n`;
        if (taxDeductions.pensionAccount > 0) deductionDetails += `Ïó∞Í∏àÍ≥ÑÏ¢åÍ≥µÏ†ú: ${formatNumber(taxDeductions.pensionAccount)}Ïõê\n`;
        if (taxDeductions.rent > 0) deductionDetails += `ÏõîÏÑ∏Ïï°Í≥µÏ†ú: ${formatNumber(taxDeductions.rent)}Ïõê\n`;
        if (taxDeductions.isa > 0) deductionDetails += `ISAÍ≥µÏ†ú: ${formatNumber(taxDeductions.isa)}Ïõê\n`;
        if (taxDeductions.medical > 0) deductionDetails += `ÏùòÎ£åÎπÑÍ≥µÏ†ú: ${formatNumber(taxDeductions.medical)}Ïõê\n`;
        if (taxDeductions.education > 0) deductionDetails += `ÍµêÏú°ÎπÑÍ≥µÏ†ú: ${formatNumber(taxDeductions.education)}Ïõê\n`;
        if (taxDeductions.donation > 0) deductionDetails += `Í∏∞Î∂ÄÍ∏àÍ≥µÏ†ú: ${formatNumber(taxDeductions.donation)}Ïõê\n`;
        
        const newMessage = {
          id: `tax-deduction-${Date.now()}`,
          type: 'calculation',
          title: 'üíé ÏÑ∏Ïï°Í≥µÏ†ú Í≥ÑÏÇ∞',
          content: `${deductionDetails}Ï¥ù ÏÑ∏Ïï°Í≥µÏ†ú: ${formatNumber(totalTaxDeduction)}Ïõê`,
          timestamp: new Date()
        };
        
        // Í∏∞Ï°¥ ÏÑ∏Ïï°Í≥µÏ†ú Î©îÏãúÏßÄÎ•º ÏÉà Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
        replaceChatMessage('tax-deduction-', newMessage);
      }, 500);
    }
    
    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    return () => {
      if (taxDeductionTimerRef.current) {
        clearTimeout(taxDeductionTimerRef.current);
      }
    };
  }, [formData.taxDeduction]);

  // ÏµúÏ¢Ö Í≥ÑÏÇ∞ Í≤∞Í≥º (Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ Îïå)
  useEffect(() => {
    if (formData.salary > 0 && currentStep === 4) {
      const salaryInWon = formData.salary * 10000;
      const laborIncomeResult = calculateLaborIncomeDeduction(salaryInWon);
      const personalResult = calculatePersonalDeduction(formData.personalDeduction);
      const pensionResult = calculatePensionInsurance(formData.pensionInsurance, salaryInWon);
      
      const taxBaseResult = calculateTaxBaseAndAmount({
        salary: salaryInWon,
        laborIncomeDeduction: laborIncomeResult.amount,
        personalDeduction: personalResult.totalDeduction,
        pensionDeduction: pensionResult.totalPension,
        specialDeduction: 0,
        otherDeduction: 0
      });
      
      const laborTaxDeduction = calculateLaborIncomeTaxDeduction(taxBaseResult.calculatedTax);
      
      const totalTaxDeductions = {
        laborIncome: laborTaxDeduction.deduction,
        child: Math.min((formData.taxDeduction.childCount || 0) * 150000, 300000),
        pensionAccount: Math.min((formData.taxDeduction.pensionAccount || 0) * 0.15, 300000),
        rent: Math.min((formData.taxDeduction.monthlyRent || 0) * (formData.taxDeduction.rentMonths || 0) * 0.1, 750000),
        isa: Math.min((formData.taxDeduction.isaAmount || 0) * 0.15, 300000),
        medical: Math.min((formData.taxDeduction.medicalExpenses || 0) * 0.15, 300000),
        education: Math.min((formData.taxDeduction.educationExpenses || 0) * 0.15, 300000),
        donation: Math.min((formData.taxDeduction.donationAmount || 0) * 0.15, 300000)
      };
      
      const finalResult = calculateFinalTax({
        calculatedTax: taxBaseResult.calculatedTax,
        taxReduction: 0,
        taxDeductions: totalTaxDeductions,
        currentPaidTax: 0,
        previousTax: 0
      });

      const finalMessage = {
        id: `final-${Date.now()}`,
        type: 'result',
        title: 'üéâ ÏµúÏ¢Ö Í≥ÑÏÇ∞ ÏôÑÎ£å!',
        content: `Í≥ºÏÑ∏ÌëúÏ§Ä: ${formatNumber(taxBaseResult.taxBase)}Ïõê\nÏÇ∞Ï∂úÏÑ∏Ïï°: ${formatNumber(taxBaseResult.calculatedTax)}Ïõê\nÏÑ∏Ïï°Í≥µÏ†ú Ï¥ùÏï°: ${formatNumber(finalResult.totalTaxDeduction)}Ïõê\n\nüéä ÏµúÏ¢Ö Í≤∞Ï†ïÏÑ∏Ïï°: ${formatNumber(finalResult.finalTax)}Ïõê`,
        timestamp: new Date()
      };
      
      // Í∏∞Ï°¥ ÏµúÏ¢Ö Í≤∞Í≥º Î©îÏãúÏßÄÎ•º ÏÉà Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
      replaceChatMessage('final-', finalMessage);
    }
  }, [currentStep, formData]);

  return (
    <div className="main-card results" style={{ display: 'block' }}>
      <h3 className="text-xl font-semibold mb-4">Í≥ÑÏÇ∞ Í≤∞Í≥º</h3>
      <div className="space-y-2">
        {chatMessages.length > 0 ? (
          chatMessages.map((message, index) => (
            <div key={message.id || index} className="p-3 bg-gray-100 rounded-lg">
              {message.title && (
                <h4 className="mb-2 text-sm font-bold text-gray-800">{message.title}</h4>
              )}
              <div className="text-sm text-gray-700 whitespace-pre-line">
                {message.content}
              </div>
              {message.timestamp && (
                <div className="mt-2 text-xs text-gray-500">
                  {new Date(message.timestamp).toLocaleTimeString()}
                </div>
              )}
            </div>
          ))
        ) : (
          <div className="p-3 bg-gray-100 rounded-lg text-center text-gray-500">
            <div className="space-y-2">
              <div className="text-2xl">üìä</div>
              <p className="text-sm">ÏûÖÎ†•ÌïòÏãúÎäî Ï†ïÎ≥¥Ïóê Îî∞Îùº</p>
              <p className="text-sm">Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í≥ÑÏÇ∞ Í≤∞Í≥ºÍ∞Ä ÌëúÏãúÎê©ÎãàÎã§</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResultChat; 